#!/usr/bin/env python3

######################################################
# Slippy Assignment
######################################################

import sys
import re
from args_parser import ArgsParser
from sed_parser import SedParser

######################################################
# Parse arguments
######################################################

args_parser = ArgsParser(sys.argv[1:])
commands = SedParser(args_parser.get_sed_command()).get_commands()

######################################################
# Helpers
######################################################

def print_input(line):
    # Print input if required
    if (args_parser.should_print_input_lines()):
        print(line, end='')

# Given a line of string (line) and affix object ({value, is_regex}), 
# check if it matches the given number or regex (value)
def is_line_and_value_matching(line, affix_object, count):
    value, is_regex = affix_object.values()
    if is_regex and re.search(value, line) or count == value:
        return True
    return False

######################################################
# Cases
######################################################

# Handle q case. Return a boolean to indicate termination or continuation
def q(command, line, count):
    print_input(line)
    return not is_line_and_value_matching(line, command['prefix'], count)

# Handle p case. Return a boolean to indicate termination or 
def p(command, line, count):
    print_input(line)
    if is_line_and_value_matching(line, command['prefix'], count):
        print(line, end='')
    return True

def d(command, line, count):
    if not is_line_and_value_matching(line, command['prefix'], count):
        print_input(line)  
    return True

def s(command, line, count):
    if is_line_and_value_matching(line, command['prefix'], count):
        src, dest = command['postfix']['affix']
        if dest and dest[-1] == 'g':
            print_input(re.sub(src, dest[:-1], line))    
        else:
            print_input(re.sub(src, dest, line, count=1))
    else:
        print_input(line) 
    return True

######################################################
# Main
######################################################

count = 1
running = True

file_inputs = args_parser.get_file_inputs() 

for line in file_inputs if file_inputs else sys.stdin:

    if not running:
        break

    for command in commands:
        if command['command'] == 'p':
            running = p(command, line, count)
        elif command['command'] == 'q':
            running = q(command, line, count)
        elif command['command'] == 'd':
            running = d(command, line, count)
        elif command['command'] == 's':
            running = s(command, line, count)
        elif command['command'] == '':
            print_input(line)

    count += 1
