#!/usr/bin/env python3

######################################################
# Slippy Assignment
######################################################

import sys
import re
from args_parser import ArgsParser
from sed_parser import SedParser

######################################################
# Parse arguments
######################################################

args_parser = ArgsParser(sys.argv[1:])
commands = SedParser(args_parser.get_sed_command()).get_commands()

######################################################
# Helpers
######################################################

def throw_error():
    print("slippy: command line: invalid command", file=sys.stderr)
    sys.exit(1)

# Given a line of string (line) and affix object ({value, is_regex}), 
def is_line_and_value_matching(line, affix_object, count, is_end):
    value, is_regex = affix_object.values()
    if (is_regex and re.search(value, line)) or (count == value) or (value == '$' and is_end):
        return True
    return False

def handle_command(commands, line, count, is_end):
    global output, running
    for command in commands:
        if command['command'] == 'p':
            p(command, line, count, is_end)
        elif command['command'] == 'q':
            q(command, line, count, is_end)
        elif command['command'] == 'd':
            d(command, line, count, is_end)
        elif command['command'] == 's':
            s(command, line, count, is_end)
        elif command['command'] == '':
            pass
    for i in output:
        print(i, end='')
    output = []

######################################################
# Cases
######################################################

# Handle q case. Return a boolean to indicate termination or continuation
def q(command, line, count, is_end):
    global running
    # Range prefix is not allowed with q command
    if command["prefix"]["is_range"]:
        throw_error()
    running = not is_line_and_value_matching(line, command['prefix']['start'], count, is_end)

# Handle p case. Return a boolean to indicate termination or 
def p(command, line, count, is_end):
    global range, output
    # Range Case 
    if command['prefix']["is_range"]:
        # Update range status
        if not range and is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
            range = True
            output.append(line)
        elif range and is_line_and_value_matching(line, command['prefix']['end'], count, is_end):
            range = False
            output.append(line)
        elif range:
            output.append(line)
    # Non-range Case
    else:
        if is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
            output.append(line)

def d(command, line, count, is_end):
    global range, output
    if len(output) > 0:
        # Range Case 
        if command['prefix']["is_range"]:
            # Update range status
            if not range and is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
                range = True
                output.pop()
            elif range and is_line_and_value_matching(line, command['prefix']['end'], count, is_end):
                range = False 
                output.pop()
            elif range:
                output.pop()
        # Non-range Case
        else:
            if is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
                output.pop()

def s(command, line, count, is_end):
    global range, output
    src, dest = command['postfix']['affix']
    def sub():
        if dest and dest[-1] == 'g':
            output.append(re.sub(src, dest[:-1], output.pop()))
        else:
            output.append(re.sub(src, dest, output.pop(), count=1))
    if len(output) > 0:
        # Range Case 
        if command['prefix']["is_range"]:
            # Update range status
            if not range and is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
                range = True
                sub()
            elif range and is_line_and_value_matching(line, command['prefix']['end'], count, is_end):
                range = False
                sub()
            elif range:
                sub()
        # Non-range Case
        else:
            if is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
                sub()

######################################################
# Main
######################################################

count = 1
running = True
buffer = [[args_parser.get_next_line(), False]]
range = False
output = []

while True:

    # Exit loop if last line reached or q command is reached
    if not buffer or not running:
        break

    # Populate buffer with next line
    next_line = args_parser.get_next_line()
    if next_line:
        buffer.append([next_line, False])
    else:
        buffer[-1][-1] = True

    current_line, is_end = buffer.pop(0)
    if args_parser.should_print_input_lines():
        output.append(current_line)
    handle_command(commands, current_line, count, is_end)
    count += 1
