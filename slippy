#!/usr/bin/env python3

######################################################
# Slippy Assignment
######################################################

import sys
import re
from args_parser import ArgsParser
from sed_parser import SedParser

######################################################
# Parse arguments
######################################################

args_parser = ArgsParser(sys.argv[1:])

commands = SedParser(args_parser.get_sed_command()).get_commands()

######################################################
# Helpers
######################################################

def print_input(line):
    # Print input if required
    if (args_parser.should_print_input_lines()):
        print(line, end='')

######################################################
# Cases
######################################################

# Handle q case. Return a boolean to indicate termination or continuation
def q(command, line, count):
    print_input(line)
    if command['is_regex']:
        return False if re.search(command['value'], line) else True
    else:
        return False if count == command['value'] else True

# Handle p case. Return a boolean to indicate termination or 
def p(command, line, count):
    print_input(line)
    if command['is_regex']:
        if re.search(command['value'], line):
            print(line, end='')        
    else:
        if count == command['value']:
            print(line, end='')
    return True

def d(command, line, count):
    if command['is_regex']:
        if not re.search(command['value'], line):
            print_input(line)  
    else:
        if count != command['value']:
            print_input(line)
    return True

def s(command, line, count):
    pass

######################################################
# Main
######################################################

count = 1
running = True

for line in sys.stdin:

    if not running:
        break

    for command in commands:
        if command['command'] == 'p':
            running = p(command, line, count)
        elif command['command'] == 'q':
            running = q(command, line, count)
        elif command['command'] == 'd':
            running = d(command, line, count)
        elif command['command'] == 's':
            running = s(command, line, count)
        elif command['command'] == '':
            print_input(line)

    count += 1


