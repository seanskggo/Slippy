#!/usr/bin/env python3

######################################################
# Slippy Assignment
######################################################

import sys
import re
from args_parser import ArgsParser
from sed_parser import SedParser

######################################################
# Parse arguments
######################################################

args_parser = ArgsParser(sys.argv[1:])
commands = SedParser(args_parser.get_sed_command()).get_commands()

######################################################
# Helpers
######################################################

# Print buffer and reset if required
def print_output_and_reset():
    global output
    if args_parser.should_replace_file_with_output():
        with open(args_parser.first_file, 'w') as f:
            for i in output: f.write(i)
        return
    for i in output: print(i, end='')
    output = []

# Thro invalid command error
def throw_error():
    print("slippy: command line: invalid command", file=sys.stderr)
    sys.exit(1)

# Given a line of string (line) and affix object ({value, is_regex}), 
def is_line_and_value_matching(line, affix_object, count, is_end):
    value, is_regex = affix_object.values()
    return (is_regex and re.search(value, line)) or (count == value) or (value == '$' and is_end)

def handle_command(commands, line, count, is_end):
    global output, running
    for command in commands:
        if command['command'] == 'p': p(command, line, count, is_end)
        elif command['command'] == 'q': q(command, line, count, is_end)
        elif command['command'] == 'd': d(command, line, count, is_end)
        elif command['command'] == 's': s(command, line, count, is_end)
        elif command['command'] == 'a': a(command, line, count, is_end)
        elif command['command'] == 'i': i(command, line, count, is_end)
        elif command['command'] == 'c': c(command, line, count, is_end)
    print_output_and_reset()

def handle_range_print(lambda_func, command, count, is_end):
    global range, output, current_line
    if command['prefix']["is_range"]:
        # Update range status
        if not range and is_line_and_value_matching(current_line, command['prefix']['start'], count, is_end):
            range = True
            lambda_func()
        elif range and is_line_and_value_matching(current_line, command['prefix']['end'], count, is_end):
            range = False
            lambda_func()
        elif range and is_line_and_value_matching(current_line, command['prefix']['start'], count, is_end):
            lambda_func()
        elif range and not command['prefix']['start']['is_regex']:
            lambda_func()
    # Non-range Case
    else:
        if is_line_and_value_matching(current_line, command['prefix']['start'], count, is_end):
            lambda_func()

def handle_range_modify(lambda_func, command, count, is_end):
    global range, output, current_line
    # Range Case 
    if command['prefix']["is_range"]:
        # Update range status
        if not range and is_line_and_value_matching(current_line, command['prefix']['start'], count, is_end):
            range = True
            lambda_func()
        elif range and is_line_and_value_matching(current_line, command['prefix']['end'], count, is_end):
            range = False 
            lambda_func()
        elif range:
            lambda_func()
    # Non-range Case
    else:
        if is_line_and_value_matching(current_line, command['prefix']['start'], count, is_end):
            lambda_func()

######################################################
# Cases
######################################################

# Handle q case. Return a boolean to indicate termination or continuation
def q(command, line, count, is_end):
    global running, output
    # Range prefix is not allowed with q command
    if command["prefix"]["is_range"]:
        throw_error()
    if is_line_and_value_matching(line, command['prefix']['start'], count, is_end):
        if output:
            print_output_and_reset()
            running = False
            return 
    running = True

# Handle p case. Return a boolean to indicate termination or 
def p(command, line, count, is_end):
    global range, output, current_line
    def lambda_func():
        output.append(current_line)
    if output or not args_parser.should_print_input_lines():
        handle_range_print(lambda_func, command, count, is_end)

def d(command, line, count, is_end):
    global range, output, current_line
    def lambda_func():
        output.pop()
    if output:
        handle_range_modify(lambda_func, command, count, is_end)

def s(command, line, count, is_end):
    global range, output
    src, dest = command['postfix']['affix']
    def lambda_func():
        global current_line
        if dest and dest[-1] == 'g':
            output.append(re.sub(src, dest[:-1], output.pop()))
        else:
            output.append(re.sub(src, dest, output.pop(), count=1))
        current_line = output[-1]
    if output and args_parser.should_print_input_lines():
        handle_range_modify(lambda_func, command, count, is_end)

def a(command, line, count, is_end):
    global range, output, current_line
    def lambda_func():
        output.append(command['postfix'] + '\n')
    if output or not args_parser.should_print_input_lines():
        handle_range_print(lambda_func, command, count, is_end)

def i(command, line, count, is_end):
    global range, output, current_line
    def lambda_func():
        output.insert(-1, command['postfix'] + '\n')
    if output or not args_parser.should_print_input_lines():
        handle_range_print(lambda_func, command, count, is_end)

def c(command, line, count, is_end):
    global range, output, current_line
    def lambda_func():
        output[-1] = command['postfix'] + '\n'
    if output or not args_parser.should_print_input_lines():
        handle_range_print(lambda_func, command, count, is_end)

######################################################
# Main
######################################################

count = 1
running = True
buffer = [[args_parser.get_next_line(), False]]
range = False
output = []
current_line = ''

while True:

    # Exit loop if last line reached or q command is reached
    if not buffer or not running:
        break

    # Populate buffer with next line
    next_line = args_parser.get_next_line()
    if next_line:
        buffer.append([next_line, False])
    else:
        buffer[-1][-1] = True

    current_line, is_end = buffer.pop(0)
    if args_parser.should_print_input_lines():
        output.append(current_line)
    handle_command(commands, current_line, count, is_end)
    count += 1
